// Generated by CoffeeScript 2.3.1
(function() {
  var parse_testml;

  require('../testml-compiler');

  require('../testml-compiler/grammar');

  require('../testml-compiler/ast');

  require('pegex').require('parser');

  parse_testml = function(testml_input, testml_file, importer) {
    var parser;
    parser = new Pegex.Parser({
      grammar: new TestMLCompiler.Grammar,
      receiver: new TestMLCompiler.AST({
        file: testml_file,
        importer: importer
      }),
      debug: Boolean(TestMLCompiler.env.TESTML_COMPILER_DEBUG)
    });
    return parser.parse(testml_input);
  };

  TestMLCompiler.Compiler = (function() {
    class Compiler {
      constructor(options = {}) {
        if (options.importer != null) {
          ({importer: this.importer} = options);
        }
      }

      compile(testml_input, testml_file = '-') {
        var grammar;
        if (TestMLCompiler.env.TESTML_COMPILER_GRAMMAR_PRINT) {
          grammar = new TestMLCompiler.DevGrammar;
          grammar.make_tree();
          say(JSON.stringify(grammar.tree, null, 2));
          exit(0);
        }
        if (testml_input.length) {
          testml_input.replace(/\n?$/, '\n');
        }
        return this.ast_to_json(parse_testml(testml_input, testml_file, this.importer));
      }

      importer(name, from) {
        var root, testml_file, testml_input;
        if (from === '-' || !from.match(/\//)) {
          root = '.';
        } else {
          root = from.replace(/^(.*)\/.*/, '$1');
        }
        testml_file = `${root}/${name}.tml`;
        testml_input = file_read(testml_file);
        return parse_testml(testml_input, testml_file, this.importer);
      }

      ast_to_json(ast) {
        var json;
        json = JSON.stringify(ast, null, 2);
        json = json.replace(/\[([^\{\[]+?)\]/g, function(m, m1) {
          return `[${m1.replace(/\n */g, '')}]`;
        });
        json = json.replace(/\ \[\n +"/g, ' ["');
        json = json.replace(/("=>",)\n *(\[[^\n]*\])/g, '$1$2');
        json = json.replace(/("\$''",)\n */g, '$1');
        json = json.replace(/\n *([\}\]])/g, '$1');
        json = json.replace(/^(\ +\["%<>",)\n\ +/mg, '$1');
        json = json.replace(/\ \[\n +\[/g, ' [[');
        json = json.replace(/^(\ +"code": \[)\[/m, '$1\n    [');
        json = json.replace(/(\{)\n +("(?:testml|label)":)/g, '$1 $2');
        json = json.replace(/^(\ +\{)\n\ +\"/mg, '$1 "');
        json = json.replace(/("=",)\n\ */g, '$1');
        return json + "\n";
      }

    };

    Compiler.prototype.ast = null;

    return Compiler;

  }).call(this);

}).call(this);
